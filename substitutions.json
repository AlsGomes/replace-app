{
    "substitutions": [
        {
            "newValue": "import jakarta.",
            "regex": "^import javax\\."
        },
        {
            "newValue": "import org.junit.jupiter.api.*;",
            "regex": "^import org\\.junit\\.\\*;$"
        },
        {
            "newValue": "import org.junit.jupiter.api.Assertions;",
            "regex": "^import org\\.junit\\.Assert;$"
        },
        {
            "newValue": "import org.junit.jupiter.api.Test;",
            "regex": "^import org\\.junit\\.Test;$"
        },
        {
            "newValue": "Assertions.",
            "regex": "Assert\\."
        },
        {
            "newValue": "@BeforeEach",
            "regex": "@Before$"
        },
        {
            "newValue": "@BeforeAll",
            "regex": "@BeforeClass$"
        },
        {
            "newValue": "@AfterEach",
            "regex": "@After$"
        },
        {
            "newValue": "@AfterAll",
            "regex": "@AfterClass$"
        },
        {
            "newValue": "import org.junit.jupiter.api.AfterEach;",
            "regex": "^import org\\.junit\\.After;$"
        },
        {
            "newValue": "import org.junit.jupiter.api.AfterAll;",
            "regex": "^import org\\.junit\\.AfterClass;$"
        },
        {
            "newValue": "import org.junit.jupiter.api.BeforeEach;",
            "regex": "^import org\\.junit\\.Before;$"
        },
        {
            "newValue": "import org.junit.jupiter.api.BeforeAll;",
            "regex": "^import org\\.junit\\.BeforeClass;$"
        },
        {
            "newValue": "@Lob\n    @Column(length = 1000)\n    private byte[] foto;",
            "regex": "@Lob$\\n\\s{4}private byte\\[\\]\\sfoto;"
        },
        {
            "newValue": "@Lob\n    @Column(length = 1000, nullable = false)\n    private byte[] xml;",
            "regex": "@Column\\(nullable = false\\)$\\n\\s{4}@Lob$\\n\\s{4}private byte\\[\\]\\sxml;"
        },
        {
            "newValue": "@Lob\n    @Column(length = Length.LONG32)\n    private String descricao;",
            "regex": "@Lob$\\n\\s{4}private String descricao;"
        },
        {
            "newValue": "jakarta.persistence.fetchgraph",
            "regex": "javax.persistence.fetchgraph"
        },
        {
            "newValue": "jakarta.persistence.loadgraph",
            "regex": "javax.persistence.loadgraph"
        },
        {
            "newValue": "jakarta.persistence.cache.retrieveMode",
            "regex": "javax.persistence.cache.retrieveMode"
        },
        {
            "newValue": "jakarta.persistence.cache.storeMode",
            "regex": "javax.persistence.cache.storeMode"
        }
    ]
}